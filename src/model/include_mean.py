def NN(x_train):	inputs = layers.Input(shape=(x_train.shape[-1],))	inputs = layers.BatchNormalization()(inputs)	x = tf.keras.layers.Dense(34, activation=tf.nn.relu6)(inputs)	layer_0= tf.keras.layers.Dense(34,activation=tf.nn.relu6)(x)	layer_0_0= tf.keras.layers.Dense(33,activation=tf.nn.relu6)(layer_0)	layer_0_0_0= tf.keras.layers.Dense(32,activation=tf.nn.relu6)(layer_0_0)	layer_0_0_0_0= tf.keras.layers.Dense(31,activation=tf.nn.relu6)(layer_0_0_0)	layer_0_0_0_0_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_0_0_0)		layer_0_0_0_1= tf.keras.layers.Dense(30,activation=tf.nn.relu6)(layer_0_0_0)	layer_0_0_0_1_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_0_0_1)		layer_0_0_1= tf.keras.layers.Dense(31,activation=tf.nn.relu6)(layer_0_0)	layer_0_0_1_0= tf.keras.layers.Dense(30,activation=tf.nn.relu6)(layer_0_0_1)	layer_0_0_1_0_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_0_1_0)		layer_0_0_1_1= tf.keras.layers.Dense(29,activation=tf.nn.relu6)(layer_0_0_1)	layer_0_0_1_1_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_0_1_1)		layer_0_1= tf.keras.layers.Dense(32,activation=tf.nn.relu6)(layer_0)	layer_0_1_0= tf.keras.layers.Dense(31,activation=tf.nn.relu6)(layer_0_1)	layer_0_1_0_0= tf.keras.layers.Dense(30,activation=tf.nn.relu6)(layer_0_1_0)	layer_0_1_0_0_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_1_0_0)		layer_0_1_0_1= tf.keras.layers.Dense(29,activation=tf.nn.relu6)(layer_0_1_0)	layer_0_1_0_1_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_1_0_1)		layer_0_1_1= tf.keras.layers.Dense(30,activation=tf.nn.relu6)(layer_0_1)	layer_0_1_1_0= tf.keras.layers.Dense(29,activation=tf.nn.relu6)(layer_0_1_1)	layer_0_1_1_0_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_1_1_0)		layer_0_1_1_1= tf.keras.layers.Dense(28,activation=tf.nn.relu6)(layer_0_1_1)	layer_0_1_1_1_pred = tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)(layer_0_1_1_1)		mean = tf.reduce_mean(tf.stack([layer_0_0_0_0_pred, layer_0_0_0_1_pred, layer_0_0_1_0_pred, layer_0_0_1_1_pred, layer_0_1_0_0_pred, layer_0_1_0_1_pred, layer_0_1_1_0_pred, layer_0_1_1_1_pred], axis=0), axis=0)	ensemble = tf.keras.models.Model(inputs, mean)	plot_model(ensemble, to_file="model_test.png", show_shapes=True)	return(ensemble)