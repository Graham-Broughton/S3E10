diff --git a/notebooks/11.NN.ipynb b/notebooks/11.NN.ipynb
index 30e70a7..8bb3c5c 100644
--- a/notebooks/11.NN.ipynb
+++ b/notebooks/11.NN.ipynb
@@ -86,7 +86,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 73,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -100,7 +100,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 74,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -110,7 +110,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 77,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -125,6 +125,239 @@
     "]"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 69,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 55,
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "ValueError",
+     "evalue": "need at least one array to concatenate",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[55], line 15\u001b[0m\n\u001b[1;32m     12\u001b[0m train_ds \u001b[39m=\u001b[39m dslist[\u001b[39m0\u001b[39m]\u001b[39m.\u001b[39mconcatenate(dslist[\u001b[39m1\u001b[39m])\u001b[39m.\u001b[39mconcatenate(dslist[\u001b[39m2\u001b[39m])\u001b[39m.\u001b[39mconcatenate(dslist[\u001b[39m3\u001b[39m])\n\u001b[1;32m     13\u001b[0m train_ds \u001b[39m=\u001b[39m train_ds\u001b[39m.\u001b[39mshuffle(\u001b[39mlen\u001b[39m(y)\u001b[39m*\u001b[39m\u001b[39m2\u001b[39m)\u001b[39m.\u001b[39mbatch(\u001b[39m128\u001b[39m)\n\u001b[0;32m---> 15\u001b[0m x \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39;49mconcatenate([x \u001b[39mfor\u001b[39;49;00m x, y \u001b[39min\u001b[39;49;00m train_ds])\n\u001b[1;32m     17\u001b[0m \u001b[39mprint\u001b[39m(x\u001b[39m.\u001b[39mshape)\n\u001b[1;32m     18\u001b[0m \u001b[39mbreak\u001b[39;00m\n",
+      "File \u001b[0;32m<__array_function__ internals>:200\u001b[0m, in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
+      "\u001b[0;31mValueError\u001b[0m: need at least one array to concatenate"
+     ]
+    }
+   ],
+   "source": [
+    "ds = tf.data.Dataset.from_tensor_slices((X, y)).shuffle(len(y)*2)\n",
+    "ds1 = ds.shard(5, 0)\n",
+    "ds2 = ds.shard(5, 1)\n",
+    "ds3 = ds.shard(5, 2)\n",
+    "ds4 = ds.shard(5, 3)\n",
+    "ds5 = ds.shard(5, 4)\n",
+    "\n",
+    "arr = [ds1, ds2, ds3, ds4, ds5]\n",
+    "\n",
+    "for ds in arr:\n",
+    "    val_ds = ds.batch(64)\n",
+    "    dslist = [d for d in arr if d is not ds]\n",
+    "    train_ds = dslist[0].concatenate(dslist[1]).concatenate(dslist[2]).concatenate(dslist[3])\n",
+    "    train_ds = train_ds.shuffle(len(y)*2).batch(128)\n",
+    "\n",
+    "    x = np.concatenate([x for x, y in train_ds])\n",
+    "\n",
+    "    print(x.shape)\n",
+    "    break"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 70,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(94052, 8)\n",
+      "(94052,)\n"
+     ]
+    }
+   ],
+   "source": [
+    "ds1 = ds.shard(5, 0)\n",
+    "ds2 = ds.shard(5, 1)\n",
+    "ds3 = ds.shard(5, 2)\n",
+    "ds4 = ds.shard(5, 3)\n",
+    "ds5 = ds.shard(5, 4)\n",
+    "\n",
+    "arr = [ds1, ds2, ds3, ds4, ds5]\n",
+    "\n",
+    "ds = arr[-1]\n",
+    "val_ds = ds\n",
+    "dslist = [d for d in arr if d is not ds]\n",
+    "train_ds = dslist[0].concatenate(dslist[1]).concatenate(dslist[2]).concatenate(dslist[3])\n",
+    "train_ds = train_ds.shuffle(len(y)*2)\n",
+    "data, labels = tuple(zip(*train_ds))\n",
+    "\n",
+    "x = np.array(data)\n",
+    "y = np.array(labels)\n",
+    "\n",
+    "print(x.shape)\n",
+    "print(y.shape)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 79,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:urou0101) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "800c9106831e44379d36d31b0de6c25c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='0.043 MB of 0.047 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=0.911670…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">NNtest</strong> at: <a href='https://wandb.ai/g-broughton/S3E10/runs/urou0101' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/urou0101</a><br/>Synced 7 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20230320_190432-urou0101/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Successfully finished last run (ID:urou0101). Initializing new run:<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "6a400a4c19ba410b9efd491875fb744e",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.01666887461663767, max=1.0)…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "ensemble = NN(test)\n",
+    "ensemble.compile(\n",
+    "    optimizer=tf.keras.optimizers.Adam(learning_rate=CFG.LR),\n",
+    "    loss='binary_crossentropy',\n",
+    "    metrics=['binary_accuracy']\n",
+    ")\n",
+    "k_fold = RepeatedStratifiedKFold(n_splits=CFG.NFOLDS, n_repeats=CFG.REPEATS, random_state=CFG.SEED)\n",
+    "\n",
+    "params = {\n",
+    "    'folds': CFG.NFOLDS,\n",
+    "    'repeats': CFG.REPEATS,\n",
+    "    'batch_size': CFG.BATCH_SIZE,\n",
+    "    'learning_rate': CFG.LR,\n",
+    "}\n",
+    "wandb.init(project='S3E10', group='NNtest', name='NNtest', config=params)\n",
+    "\n",
+    "train_log_loss = []\n",
+    "oof_log_loss = []\n",
+    "models = []\n",
+    "\n",
+    "ds = tf.data.Dataset.from_tensor_slices((X, y)).shuffle(len(y)*2)\n",
+    "ds1 = ds.shard(5, 0)\n",
+    "ds2 = ds.shard(5, 1)\n",
+    "ds3 = ds.shard(5, 2)\n",
+    "ds4 = ds.shard(5, 3)\n",
+    "ds5 = ds.shard(5, 4)\n",
+    "\n",
+    "arr = [ds1, ds2, ds3, ds4, ds5]\n",
+    "\n",
+    "for ds in arr:\n",
+    "    val_ds = ds.batch(64)\n",
+    "    dslist = [d for d in arr if d is not ds]\n",
+    "    train_ds = dslist[0].concatenate(dslist[1]).concatenate(dslist[2]).concatenate(dslist[3])\n",
+    "    train_ds = train_ds.shuffle(len(y)*2).batch(128)\n",
+    "\n",
+    "    history = ensemble.fit(\n",
+    "        train_ds,\n",
+    "        epochs=CFG.EPOCHS, callbacks=callbacks, \n",
+    "        validation_data=val_ds, \n",
+    "        use_multiprocessing=True\n",
+    "    )\n",
+    "\n",
+    "    # train_preds = ensemble.predict(train_ds)\n",
+    "    # train_loss = log_loss(y_train, train_preds)\n",
+    "    # train_log_loss.append(train_loss)\n",
+    "\n",
+    "    # oof_preds = ensemble.predict(X_val)\n",
+    "    # oof_loss = log_loss(y_val, oof_preds)\n",
+    "    # oof_log_loss.append(oof_loss)\n",
+    "\n",
+    "    models.append(ensemble)\n",
+    "wandb.finish()\n"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 25,
@@ -334,7 +567,180 @@
       "Epoch 17/50\n",
       "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0398 - binary_accuracy: 0.9893 - val_loss: 0.0345 - val_binary_accuracy: 0.9903 - lr: 0.0010\n",
       "Epoch 18/50\n",
-      "4897/4899 [============================>.] - ETA: 0s - loss: 0.0395 - binary_accuracy: 0.9893"
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0395 - binary_accuracy: 0.9893 - val_loss: 0.0410 - val_binary_accuracy: 0.9892 - lr: 0.0010\n",
+      "Epoch 19/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0399 - binary_accuracy: 0.9893 - val_loss: 0.0390 - val_binary_accuracy: 0.9898 - lr: 0.0010\n",
+      "Epoch 20/50\n",
+      "4899/4899 [==============================] - 36s 7ms/step - loss: 0.0397 - binary_accuracy: 0.9894 - val_loss: 0.0365 - val_binary_accuracy: 0.9898 - lr: 0.0010\n",
+      "Epoch 21/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0394 - binary_accuracy: 0.9893 - val_loss: 0.0382 - val_binary_accuracy: 0.9893 - lr: 0.0010\n",
+      "Epoch 22/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0393 - binary_accuracy: 0.9892 - val_loss: 0.0338 - val_binary_accuracy: 0.9904 - lr: 0.0010\n",
+      "Epoch 23/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0392 - binary_accuracy: 0.9895 - val_loss: 0.0334 - val_binary_accuracy: 0.9908 - lr: 0.0010\n",
+      "Epoch 24/50\n",
+      "4895/4899 [============================>.] - ETA: 0s - loss: 0.0392 - binary_accuracy: 0.9894\n",
+      "Epoch 24: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
+      "4899/4899 [==============================] - 42s 8ms/step - loss: 0.0392 - binary_accuracy: 0.9894 - val_loss: 0.0379 - val_binary_accuracy: 0.9899 - lr: 0.0010\n",
+      "Epoch 25/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0381 - binary_accuracy: 0.9899 - val_loss: 0.0336 - val_binary_accuracy: 0.9907 - lr: 5.0000e-04\n",
+      "Epoch 26/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0372 - binary_accuracy: 0.9900 - val_loss: 0.0364 - val_binary_accuracy: 0.9898 - lr: 5.0000e-04\n",
+      "Epoch 27/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0372 - binary_accuracy: 0.9900 - val_loss: 0.0339 - val_binary_accuracy: 0.9907 - lr: 5.0000e-04\n",
+      "Epoch 28/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0377 - binary_accuracy: 0.9898 - val_loss: 0.0331 - val_binary_accuracy: 0.9903 - lr: 5.0000e-04\n",
+      "Epoch 29/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0372 - binary_accuracy: 0.9900 - val_loss: 0.0360 - val_binary_accuracy: 0.9906 - lr: 5.0000e-04\n",
+      "Epoch 30/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0372 - binary_accuracy: 0.9900 - val_loss: 0.0353 - val_binary_accuracy: 0.9904 - lr: 5.0000e-04\n",
+      "Epoch 31/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0374 - binary_accuracy: 0.9898 - val_loss: 0.0352 - val_binary_accuracy: 0.9900 - lr: 5.0000e-04\n",
+      "Epoch 32/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0376 - binary_accuracy: 0.9898 - val_loss: 0.0345 - val_binary_accuracy: 0.9904 - lr: 5.0000e-04\n",
+      "Epoch 33/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0373 - binary_accuracy: 0.9896 - val_loss: 0.0353 - val_binary_accuracy: 0.9905 - lr: 5.0000e-04\n",
+      "Epoch 34/50\n",
+      "4895/4899 [============================>.] - ETA: 0s - loss: 0.0373 - binary_accuracy: 0.9901Restoring model weights from the end of the best epoch: 14.\n",
+      "\n",
+      "Epoch 34: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0373 - binary_accuracy: 0.9901 - val_loss: 0.0342 - val_binary_accuracy: 0.9903 - lr: 5.0000e-04\n",
+      "Epoch 34: early stopping\n",
+      "2450/2450 [==============================] - 6s 2ms/step\n",
+      "1225/1225 [==============================] - 3s 2ms/step\n",
+      "Epoch 1/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0370 - binary_accuracy: 0.9901 - val_loss: 0.0362 - val_binary_accuracy: 0.9902 - lr: 2.5000e-04\n",
+      "Epoch 2/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0369 - binary_accuracy: 0.9898 - val_loss: 0.0356 - val_binary_accuracy: 0.9902 - lr: 2.5000e-04\n",
+      "Epoch 3/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0362 - binary_accuracy: 0.9902 - val_loss: 0.0353 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 4/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0365 - binary_accuracy: 0.9901 - val_loss: 0.0344 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 5/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0362 - binary_accuracy: 0.9900 - val_loss: 0.0360 - val_binary_accuracy: 0.9900 - lr: 2.5000e-04\n",
+      "Epoch 6/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0361 - binary_accuracy: 0.9901 - val_loss: 0.0352 - val_binary_accuracy: 0.9905 - lr: 2.5000e-04\n",
+      "Epoch 7/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0359 - binary_accuracy: 0.9901 - val_loss: 0.0351 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 8/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0354 - binary_accuracy: 0.9901 - val_loss: 0.0354 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 9/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0351 - binary_accuracy: 0.9903 - val_loss: 0.0363 - val_binary_accuracy: 0.9903 - lr: 2.5000e-04\n",
+      "Epoch 10/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0358 - binary_accuracy: 0.9901 - val_loss: 0.0349 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 11/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0357 - binary_accuracy: 0.9902 - val_loss: 0.0354 - val_binary_accuracy: 0.9903 - lr: 2.5000e-04\n",
+      "Epoch 12/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0355 - binary_accuracy: 0.9901 - val_loss: 0.0340 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 13/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0353 - binary_accuracy: 0.9903 - val_loss: 0.0342 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 14/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0359 - binary_accuracy: 0.9902 - val_loss: 0.0351 - val_binary_accuracy: 0.9904 - lr: 2.5000e-04\n",
+      "Epoch 15/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0356 - binary_accuracy: 0.9902 - val_loss: 0.0344 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 16/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0356 - binary_accuracy: 0.9904 - val_loss: 0.0350 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 17/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0352 - binary_accuracy: 0.9904 - val_loss: 0.0356 - val_binary_accuracy: 0.9903 - lr: 2.5000e-04\n",
+      "Epoch 18/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0350 - binary_accuracy: 0.9904 - val_loss: 0.0341 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 19/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0359 - binary_accuracy: 0.9902 - val_loss: 0.0350 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 20/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0356 - binary_accuracy: 0.9904 - val_loss: 0.0344 - val_binary_accuracy: 0.9906 - lr: 2.5000e-04\n",
+      "Epoch 21/50\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0352 - binary_accuracy: 0.9903 - val_loss: 0.0355 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 22/50\n",
+      "4892/4899 [============================>.] - ETA: 0s - loss: 0.0354 - binary_accuracy: 0.9904\n",
+      "Epoch 22: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n",
+      "4899/4899 [==============================] - 38s 8ms/step - loss: 0.0353 - binary_accuracy: 0.9904 - val_loss: 0.0353 - val_binary_accuracy: 0.9907 - lr: 2.5000e-04\n",
+      "Epoch 23/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0347 - binary_accuracy: 0.9904 - val_loss: 0.0367 - val_binary_accuracy: 0.9902 - lr: 1.2500e-04\n",
+      "Epoch 24/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0354 - binary_accuracy: 0.9902 - val_loss: 0.0365 - val_binary_accuracy: 0.9902 - lr: 1.2500e-04\n",
+      "Epoch 25/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0353 - binary_accuracy: 0.9901 - val_loss: 0.0365 - val_binary_accuracy: 0.9904 - lr: 1.2500e-04\n",
+      "Epoch 26/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0351 - binary_accuracy: 0.9903 - val_loss: 0.0353 - val_binary_accuracy: 0.9906 - lr: 1.2500e-04\n",
+      "Epoch 27/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0346 - binary_accuracy: 0.9903 - val_loss: 0.0366 - val_binary_accuracy: 0.9904 - lr: 1.2500e-04\n",
+      "Epoch 28/50\n",
+      "4899/4899 [==============================] - 37s 8ms/step - loss: 0.0350 - binary_accuracy: 0.9902 - val_loss: 0.0360 - val_binary_accuracy: 0.9903 - lr: 1.2500e-04\n",
+      "Epoch 29/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0350 - binary_accuracy: 0.9904 - val_loss: 0.0353 - val_binary_accuracy: 0.9905 - lr: 1.2500e-04\n",
+      "Epoch 30/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0346 - binary_accuracy: 0.9902 - val_loss: 0.0347 - val_binary_accuracy: 0.9905 - lr: 1.2500e-04\n",
+      "Epoch 31/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0349 - binary_accuracy: 0.9905 - val_loss: 0.0351 - val_binary_accuracy: 0.9906 - lr: 1.2500e-04\n",
+      "Epoch 32/50\n",
+      "4895/4899 [============================>.] - ETA: 0s - loss: 0.0347 - binary_accuracy: 0.9904Restoring model weights from the end of the best epoch: 12.\n",
+      "\n",
+      "Epoch 32: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0347 - binary_accuracy: 0.9905 - val_loss: 0.0354 - val_binary_accuracy: 0.9903 - lr: 1.2500e-04\n",
+      "Epoch 32: early stopping\n",
+      "2450/2450 [==============================] - 5s 2ms/step\n",
+      "1225/1225 [==============================] - 2s 2ms/step\n",
+      "Epoch 1/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0346 - binary_accuracy: 0.9903 - val_loss: 0.0346 - val_binary_accuracy: 0.9901 - lr: 6.2500e-05\n",
+      "Epoch 2/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0344 - binary_accuracy: 0.9909 - val_loss: 0.0345 - val_binary_accuracy: 0.9903 - lr: 6.2500e-05\n",
+      "Epoch 3/50\n",
+      "4899/4899 [==============================] - 39s 8ms/step - loss: 0.0348 - binary_accuracy: 0.9906 - val_loss: 0.0351 - val_binary_accuracy: 0.9903 - lr: 6.2500e-05\n",
+      "Epoch 4/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0345 - binary_accuracy: 0.9906 - val_loss: 0.0347 - val_binary_accuracy: 0.9900 - lr: 6.2500e-05\n",
+      "Epoch 5/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0346 - binary_accuracy: 0.9905 - val_loss: 0.0350 - val_binary_accuracy: 0.9901 - lr: 6.2500e-05\n",
+      "Epoch 6/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0345 - binary_accuracy: 0.9905 - val_loss: 0.0345 - val_binary_accuracy: 0.9903 - lr: 6.2500e-05\n",
+      "Epoch 7/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0341 - binary_accuracy: 0.9906 - val_loss: 0.0348 - val_binary_accuracy: 0.9902 - lr: 6.2500e-05\n",
+      "Epoch 8/50\n",
+      "4899/4899 [==============================] - 40s 8ms/step - loss: 0.0345 - binary_accuracy: 0.9904 - val_loss: 0.0350 - val_binary_accuracy: 0.9902 - lr: 6.2500e-05\n",
+      "Epoch 9/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0343 - binary_accuracy: 0.9905 - val_loss: 0.0350 - val_binary_accuracy: 0.9902 - lr: 6.2500e-05\n",
+      "Epoch 10/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0347 - binary_accuracy: 0.9904 - val_loss: 0.0353 - val_binary_accuracy: 0.9900 - lr: 6.2500e-05\n",
+      "Epoch 11/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0347 - binary_accuracy: 0.9905 - val_loss: 0.0349 - val_binary_accuracy: 0.9902 - lr: 6.2500e-05\n",
+      "Epoch 12/50\n",
+      "4896/4899 [============================>.] - ETA: 0s - loss: 0.0340 - binary_accuracy: 0.9905\n",
+      "Epoch 12: ReduceLROnPlateau reducing learning rate to 3.125000148429535e-05.\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0340 - binary_accuracy: 0.9905 - val_loss: 0.0352 - val_binary_accuracy: 0.9901 - lr: 6.2500e-05\n",
+      "Epoch 13/50\n",
+      "4899/4899 [==============================] - 41s 8ms/step - loss: 0.0341 - binary_accuracy: 0.9907 - val_loss: 0.0347 - val_binary_accuracy: 0.9902 - lr: 3.1250e-05\n",
+      "Epoch 14/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0340 - binary_accuracy: 0.9907 - val_loss: 0.0346 - val_binary_accuracy: 0.9903 - lr: 3.1250e-05\n",
+      "Epoch 15/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0335 - binary_accuracy: 0.9905 - val_loss: 0.0353 - val_binary_accuracy: 0.9902 - lr: 3.1250e-05\n",
+      "Epoch 16/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0341 - binary_accuracy: 0.9905 - val_loss: 0.0350 - val_binary_accuracy: 0.9901 - lr: 3.1250e-05\n",
+      "Epoch 17/50\n",
+      "4899/4899 [==============================] - 42s 9ms/step - loss: 0.0339 - binary_accuracy: 0.9905 - val_loss: 0.0344 - val_binary_accuracy: 0.9904 - lr: 3.1250e-05\n",
+      "Epoch 18/50\n",
+      "4057/4899 [=======================>......] - ETA: 6s - loss: 0.0344 - binary_accuracy: 0.9909"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[25], line 24\u001b[0m\n\u001b[1;32m     21\u001b[0m X_train, X_val \u001b[39m=\u001b[39m X\u001b[39m.\u001b[39miloc[train_idx], X\u001b[39m.\u001b[39miloc[val_idx]\n\u001b[1;32m     22\u001b[0m y_train, y_val \u001b[39m=\u001b[39m y\u001b[39m.\u001b[39miloc[train_idx], y\u001b[39m.\u001b[39miloc[val_idx]\n\u001b[0;32m---> 24\u001b[0m history \u001b[39m=\u001b[39m ensemble\u001b[39m.\u001b[39;49mfit(\n\u001b[1;32m     25\u001b[0m     X_train, y_train, \n\u001b[1;32m     26\u001b[0m     batch_size\u001b[39m=\u001b[39;49mCFG\u001b[39m.\u001b[39;49mBATCH_SIZE, \n\u001b[1;32m     27\u001b[0m     epochs\u001b[39m=\u001b[39;49mCFG\u001b[39m.\u001b[39;49mEPOCHS, callbacks\u001b[39m=\u001b[39;49mcallbacks, \n\u001b[1;32m     28\u001b[0m     validation_data\u001b[39m=\u001b[39;49m(X_val, y_val),\n\u001b[1;32m     29\u001b[0m     use_multiprocessing\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m\n\u001b[1;32m     30\u001b[0m )\n\u001b[1;32m     32\u001b[0m train_preds \u001b[39m=\u001b[39m ensemble\u001b[39m.\u001b[39mpredict(X_train)\n\u001b[1;32m     33\u001b[0m train_loss \u001b[39m=\u001b[39m log_loss(y_train, train_preds)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/wandb/integration/keras/keras.py:174\u001b[0m, in \u001b[0;36mpatch_tf_keras.<locals>.new_v2\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    172\u001b[0m     \u001b[39mfor\u001b[39;00m cbk \u001b[39min\u001b[39;00m cbks:\n\u001b[1;32m    173\u001b[0m         set_wandb_attrs(cbk, val_data)\n\u001b[0;32m--> 174\u001b[0m \u001b[39mreturn\u001b[39;00m old_v2(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/wandb/integration/keras/keras.py:174\u001b[0m, in \u001b[0;36mpatch_tf_keras.<locals>.new_v2\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    172\u001b[0m     \u001b[39mfor\u001b[39;00m cbk \u001b[39min\u001b[39;00m cbks:\n\u001b[1;32m    173\u001b[0m         set_wandb_attrs(cbk, val_data)\n\u001b[0;32m--> 174\u001b[0m \u001b[39mreturn\u001b[39;00m old_v2(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/wandb/integration/keras/keras.py:174\u001b[0m, in \u001b[0;36mpatch_tf_keras.<locals>.new_v2\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    172\u001b[0m     \u001b[39mfor\u001b[39;00m cbk \u001b[39min\u001b[39;00m cbks:\n\u001b[1;32m    173\u001b[0m         set_wandb_attrs(cbk, val_data)\n\u001b[0;32m--> 174\u001b[0m \u001b[39mreturn\u001b[39;00m old_v2(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[39m=\u001b[39m \u001b[39mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[39mreturn\u001b[39;00m fn(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m     66\u001b[0m \u001b[39mexcept\u001b[39;00m \u001b[39mException\u001b[39;00m \u001b[39mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[39m=\u001b[39m _process_traceback_frames(e\u001b[39m.\u001b[39m__traceback__)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/keras/engine/training.py:1650\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1642\u001b[0m \u001b[39mwith\u001b[39;00m tf\u001b[39m.\u001b[39mprofiler\u001b[39m.\u001b[39mexperimental\u001b[39m.\u001b[39mTrace(\n\u001b[1;32m   1643\u001b[0m     \u001b[39m\"\u001b[39m\u001b[39mtrain\u001b[39m\u001b[39m\"\u001b[39m,\n\u001b[1;32m   1644\u001b[0m     epoch_num\u001b[39m=\u001b[39mepoch,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1647\u001b[0m     _r\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m,\n\u001b[1;32m   1648\u001b[0m ):\n\u001b[1;32m   1649\u001b[0m     callbacks\u001b[39m.\u001b[39mon_train_batch_begin(step)\n\u001b[0;32m-> 1650\u001b[0m     tmp_logs \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mtrain_function(iterator)\n\u001b[1;32m   1651\u001b[0m     \u001b[39mif\u001b[39;00m data_handler\u001b[39m.\u001b[39mshould_sync:\n\u001b[1;32m   1652\u001b[0m         context\u001b[39m.\u001b[39masync_wait()\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[39m=\u001b[39m \u001b[39mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[39mreturn\u001b[39;00m fn(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m    151\u001b[0m \u001b[39mexcept\u001b[39;00m \u001b[39mException\u001b[39;00m \u001b[39mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[39m=\u001b[39m _process_traceback_frames(e\u001b[39m.\u001b[39m__traceback__)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:880\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    877\u001b[0m compiler \u001b[39m=\u001b[39m \u001b[39m\"\u001b[39m\u001b[39mxla\u001b[39m\u001b[39m\"\u001b[39m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_jit_compile \u001b[39melse\u001b[39;00m \u001b[39m\"\u001b[39m\u001b[39mnonXla\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[1;32m    879\u001b[0m \u001b[39mwith\u001b[39;00m OptionalXlaContext(\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 880\u001b[0m   result \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwds)\n\u001b[1;32m    882\u001b[0m new_tracing_count \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    883\u001b[0m without_tracing \u001b[39m=\u001b[39m (tracing_count \u001b[39m==\u001b[39m new_tracing_count)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:912\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    909\u001b[0m   \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_lock\u001b[39m.\u001b[39mrelease()\n\u001b[1;32m    910\u001b[0m   \u001b[39m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    911\u001b[0m   \u001b[39m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 912\u001b[0m   \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_no_variable_creation_fn(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwds)  \u001b[39m# pylint: disable=not-callable\u001b[39;00m\n\u001b[1;32m    913\u001b[0m \u001b[39melif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_variable_creation_fn \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m    914\u001b[0m   \u001b[39m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    915\u001b[0m   \u001b[39m# in parallel.\u001b[39;00m\n\u001b[1;32m    916\u001b[0m   \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_lock\u001b[39m.\u001b[39mrelease()\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py:134\u001b[0m, in \u001b[0;36mTracingCompiler.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[39mwith\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_lock:\n\u001b[1;32m    132\u001b[0m   (concrete_function,\n\u001b[1;32m    133\u001b[0m    filtered_flat_args) \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m--> 134\u001b[0m \u001b[39mreturn\u001b[39;00m concrete_function\u001b[39m.\u001b[39;49m_call_flat(\n\u001b[1;32m    135\u001b[0m     filtered_flat_args, captured_inputs\u001b[39m=\u001b[39;49mconcrete_function\u001b[39m.\u001b[39;49mcaptured_inputs)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1745\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1741\u001b[0m possible_gradient_type \u001b[39m=\u001b[39m gradients_util\u001b[39m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1742\u001b[0m \u001b[39mif\u001b[39;00m (possible_gradient_type \u001b[39m==\u001b[39m gradients_util\u001b[39m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1743\u001b[0m     \u001b[39mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1744\u001b[0m   \u001b[39m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1745\u001b[0m   \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_build_call_outputs(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_inference_function\u001b[39m.\u001b[39;49mcall(\n\u001b[1;32m   1746\u001b[0m       ctx, args, cancellation_manager\u001b[39m=\u001b[39;49mcancellation_manager))\n\u001b[1;32m   1747\u001b[0m forward_backward \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1748\u001b[0m     args,\n\u001b[1;32m   1749\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1750\u001b[0m     executing_eagerly)\n\u001b[1;32m   1751\u001b[0m forward_function, args_with_tangents \u001b[39m=\u001b[39m forward_backward\u001b[39m.\u001b[39mforward()\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:378\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    376\u001b[0m \u001b[39mwith\u001b[39;00m _InterpolateFunctionError(\u001b[39mself\u001b[39m):\n\u001b[1;32m    377\u001b[0m   \u001b[39mif\u001b[39;00m cancellation_manager \u001b[39mis\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[0;32m--> 378\u001b[0m     outputs \u001b[39m=\u001b[39m execute\u001b[39m.\u001b[39;49mexecute(\n\u001b[1;32m    379\u001b[0m         \u001b[39mstr\u001b[39;49m(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49msignature\u001b[39m.\u001b[39;49mname),\n\u001b[1;32m    380\u001b[0m         num_outputs\u001b[39m=\u001b[39;49m\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_num_outputs,\n\u001b[1;32m    381\u001b[0m         inputs\u001b[39m=\u001b[39;49margs,\n\u001b[1;32m    382\u001b[0m         attrs\u001b[39m=\u001b[39;49mattrs,\n\u001b[1;32m    383\u001b[0m         ctx\u001b[39m=\u001b[39;49mctx)\n\u001b[1;32m    384\u001b[0m   \u001b[39melse\u001b[39;00m:\n\u001b[1;32m    385\u001b[0m     outputs \u001b[39m=\u001b[39m execute\u001b[39m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    386\u001b[0m         \u001b[39mstr\u001b[39m(\u001b[39mself\u001b[39m\u001b[39m.\u001b[39msignature\u001b[39m.\u001b[39mname),\n\u001b[1;32m    387\u001b[0m         num_outputs\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    390\u001b[0m         ctx\u001b[39m=\u001b[39mctx,\n\u001b[1;32m    391\u001b[0m         cancellation_manager\u001b[39m=\u001b[39mcancellation_manager)\n",
+      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[1;32m     51\u001b[0m   ctx\u001b[39m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 52\u001b[0m   tensors \u001b[39m=\u001b[39m pywrap_tfe\u001b[39m.\u001b[39;49mTFE_Py_Execute(ctx\u001b[39m.\u001b[39;49m_handle, device_name, op_name,\n\u001b[1;32m     53\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m \u001b[39mexcept\u001b[39;00m core\u001b[39m.\u001b[39m_NotOkStatusException \u001b[39mas\u001b[39;00m e:\n\u001b[1;32m     55\u001b[0m   \u001b[39mif\u001b[39;00m name \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
      ]
     }
    ],
@@ -353,20 +759,26 @@
     "    'batch_size': CFG.BATCH_SIZE,\n",
     "    'learning_rate': CFG.LR,\n",
     "}\n",
-    "wandb.init(project='S3E10', group='NN', name='NN', config=params)\n",
+    "#wandb.init(project='S3E10', group='NN', name='NN', config=params)\n",
     "\n",
     "train_log_loss = []\n",
     "oof_log_loss = []\n",
     "models = []\n",
+    "\n",
+    "ds = tf.data.Dataset.from_tensor_slices((X, y)).shuffle(len(y)*2)\n",
+    "\n",
+    "\n",
     "for train_idx, val_idx in k_fold.split(X, y):\n",
     "    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n",
     "    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n",
     "\n",
+    "    train_ds = tf.data.Dataset.from_tensor_slices((X_train, y_train)).shuffle(len(X_train)*2).batch(128)\n",
+    "    val_ds = tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(64)\n",
+    "    \n",
     "    history = ensemble.fit(\n",
-    "        X_train, y_train, \n",
-    "        batch_size=CFG.BATCH_SIZE, \n",
+    "        train_ds,\n",
     "        epochs=CFG.EPOCHS, callbacks=callbacks, \n",
-    "        validation_data=(X_val, y_val),\n",
+    "        validation_data=val_ds, \n",
     "        use_multiprocessing=True\n",
     "    )\n",
     "\n",
diff --git a/notebooks/model_concat.png b/notebooks/model_concat.png
index 6413f5d..076eb21 100644
Binary files a/notebooks/model_concat.png and b/notebooks/model_concat.png differ
diff --git a/notebooks/wandb/latest-run b/notebooks/wandb/latest-run
index e797b8c..8cc52a1 120000
--- a/notebooks/wandb/latest-run
+++ b/notebooks/wandb/latest-run
@@ -1 +1 @@
-run-20230320_152550-h59q3gsv
\ No newline at end of file
+run-20230320_190519-oq9wkmlb
\ No newline at end of file
diff --git a/notebooks/wandb/run-20230320_152550-h59q3gsv/files/config.yaml b/notebooks/wandb/run-20230320_152550-h59q3gsv/files/config.yaml
index bc75855..d130ea4 100644
--- a/notebooks/wandb/run-20230320_152550-h59q3gsv/files/config.yaml
+++ b/notebooks/wandb/run-20230320_152550-h59q3gsv/files/config.yaml
@@ -7,7 +7,12 @@ _wandb:
     framework: keras
     is_jupyter_run: true
     is_kaggle_kernel: false
+    m:
+    - 1: epoch/epoch
+      6:
+      - 3
     python_version: 3.10.9
+    session_history: code/_session_history.ipynb
     start_time: 1679325955.996149
     t:
       1:
@@ -23,9 +28,12 @@ _wandb:
       - 53
       - 55
       3:
+      - 2
+      - 7
       - 13
       - 16
       - 23
+      - 38
       4: 3.10.9
       5: 0.14.0
       8:
diff --git a/notebooks/wandb/run-20230320_152550-h59q3gsv/files/wandb-summary.json b/notebooks/wandb/run-20230320_152550-h59q3gsv/files/wandb-summary.json
index 831e4b3..7e42f01 100644
--- a/notebooks/wandb/run-20230320_152550-h59q3gsv/files/wandb-summary.json
+++ b/notebooks/wandb/run-20230320_152550-h59q3gsv/files/wandb-summary.json
@@ -1 +1 @@
-{"epoch/loss": 0.039511341601610184, "epoch/binary_accuracy": 0.9893462061882019, "epoch/val_loss": 0.04104290530085564, "epoch/val_binary_accuracy": 0.9891803860664368, "epoch/lr": 0.0010000000474974513, "epoch/epoch": 17, "epoch/learning_rate": 0.0010000000474974513, "_timestamp": 1679326655.6874287, "_runtime": 699.6912796497345, "_step": 17}
\ No newline at end of file
+{"epoch/loss": 0.033938292413949966, "epoch/binary_accuracy": 0.9905073046684265, "epoch/val_loss": 0.034422725439071655, "epoch/val_binary_accuracy": 0.9904052019119263, "epoch/lr": 3.125000148429535e-05, "epoch/epoch": 16, "epoch/learning_rate": 3.125000148429535e-05, "_timestamp": 1679329234.1188807, "_runtime": 3278.1227316856384, "_step": 82, "_wandb": {"runtime": 3430}}
\ No newline at end of file
diff --git a/notebooks/wandb/run-20230320_152550-h59q3gsv/run-h59q3gsv.wandb b/notebooks/wandb/run-20230320_152550-h59q3gsv/run-h59q3gsv.wandb
index f2ef7c1..562acab 100644
Binary files a/notebooks/wandb/run-20230320_152550-h59q3gsv/run-h59q3gsv.wandb and b/notebooks/wandb/run-20230320_152550-h59q3gsv/run-h59q3gsv.wandb differ
