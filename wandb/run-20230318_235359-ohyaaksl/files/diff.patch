diff --git a/notebooks/9.PCA.ipynb b/notebooks/9.PCA.ipynb
index c7741da..3329b1a 100644
--- a/notebooks/9.PCA.ipynb
+++ b/notebooks/9.PCA.ipynb
@@ -2,9 +2,18 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 12,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "The autoreload extension is already loaded. To reload it, use:\n",
+      "  %reload_ext autoreload\n"
+     ]
+    }
+   ],
    "source": [
     "%load_ext autoreload\n",
     "%autoreload 2"
@@ -12,28 +21,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 35,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mg-broughton\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "True"
-      ]
-     },
-     "execution_count": 14,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "import pandas as pd\n",
     "from pandas.io.formats.style import Styler\n",
@@ -48,9 +38,11 @@
     "import sys\n",
     "import datetime\n",
     "from tqdm import tqdm\n",
+    "import copy\n",
     "\n",
     "import optuna\n",
     "import wandb\n",
+    "from wandb.lightgbm import wandb_callback, log_summary\n",
     "\n",
     "import xgboost as xgb\n",
     "from xgboost.callback import EarlyStopping\n",
@@ -62,6 +54,7 @@
     "from sklearn.model_selection import StratifiedKFold, RepeatedStratifiedKFold\n",
     "from sklearn.metrics import mean_squared_error, log_loss\n",
     "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
+    "from sklearn.linear_model import LogisticRegression, RidgeClassifier, Ridge, BayesianRidge\n",
     "\n",
     "from umap import UMAP\n",
     "\n",
@@ -73,14 +66,12 @@
     "CFG = CFG()\n",
     "pd.options.display.float_format = '{:,.2f}'.format\n",
     "pd.set_option('display.max_columns', CFG.NCOLS)\n",
-    "pd.set_option('display.max_rows', CFG.NROWS)\n",
-    "\n",
-    "wandb.init(project='S3E10', )"
+    "pd.set_option('display.max_rows', CFG.NROWS)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -118,27 +109,14 @@
     "train = pd.read_csv(os.path.join(CFG.RAW_DATA, 'train.csv')).drop(columns='id')\n",
     "test = pd.read_csv(os.path.join(CFG.RAW_DATA, 'test.csv')).drop(columns='id')\n",
     "\n",
-    "config = wandb.config"
+    "config = {}"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 36,
    "metadata": {},
-   "outputs": [
-    {
-     "ename": "Error",
-     "evalue": "You must call wandb.init() before wandb.config['scaler']",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mError\u001b[0m                                     Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[16], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m scaler \u001b[39m=\u001b[39m StandardScaler()\n\u001b[0;32m----> 2\u001b[0m config[\u001b[39m'\u001b[39;49m\u001b[39mscaler\u001b[39;49m\u001b[39m'\u001b[39;49m] \u001b[39m=\u001b[39m \u001b[39m\"\u001b[39m\u001b[39mstandard\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m scaled_tr \u001b[39m=\u001b[39m pd\u001b[39m.\u001b[39mDataFrame(scaler\u001b[39m.\u001b[39mfit_transform(train\u001b[39m.\u001b[39mdrop(\u001b[39m\"\u001b[39m\u001b[39mClass\u001b[39m\u001b[39m\"\u001b[39m, axis\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m)), columns\u001b[39m=\u001b[39mtrain\u001b[39m.\u001b[39mdrop(\u001b[39m\"\u001b[39m\u001b[39mClass\u001b[39m\u001b[39m\"\u001b[39m, axis\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m)\u001b[39m.\u001b[39mcolumns)\n\u001b[1;32m      5\u001b[0m scaled_tr[\u001b[39m\"\u001b[39m\u001b[39mClass\u001b[39m\u001b[39m\"\u001b[39m] \u001b[39m=\u001b[39m train[\u001b[39m\"\u001b[39m\u001b[39mClass\u001b[39m\u001b[39m\"\u001b[39m]\n",
-      "File \u001b[0;32m~/mambaforge/envs/kaggle/lib/python3.10/site-packages/wandb/sdk/lib/preinit.py:17\u001b[0m, in \u001b[0;36mPreInitObject.__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m__setitem__\u001b[39m(\u001b[39mself\u001b[39m, key: \u001b[39mstr\u001b[39m, value: Any) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Any:\n\u001b[0;32m---> 17\u001b[0m     \u001b[39mraise\u001b[39;00m wandb\u001b[39m.\u001b[39mError(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mYou must call wandb.init() before \u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_name\u001b[39m}\u001b[39;00m\u001b[39m[\u001b[39m\u001b[39m{\u001b[39;00mkey\u001b[39m!r}\u001b[39;00m\u001b[39m]\u001b[39m\u001b[39m\"\u001b[39m)\n",
-      "\u001b[0;31mError\u001b[0m: You must call wandb.init() before wandb.config['scaler']"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "scaler = StandardScaler()\n",
     "config['scaler'] = \"standard\"\n",
@@ -154,7 +132,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 37,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -172,7 +150,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 39,
+   "execution_count": 38,
    "metadata": {},
    "outputs": [
     {
@@ -201,7 +179,7 @@
           8
          ],
          "y": [
-          0.5834717140043428,
+          0.5834717140043426,
           0.8240452707069856,
           0.9083329095141839,
           0.958652896928117,
@@ -218,7 +196,7 @@
          },
          "name": "Explained Variance",
          "type": "bar",
-         "width": 0.5,
+         "width": 0.7,
          "x": [
           0,
           1,
@@ -231,15 +209,15 @@
           8
          ],
          "y": [
-          0.5834717140043428,
-          0.2405735567026428,
-          0.08428763880719821,
-          0.05031998741393307,
-          0.02235616169300326,
-          0.01316782157984296,
-          0.0031529629659316403,
-          0.0015367075104978627,
-          0.0011334493226072893
+          0.5834717140043426,
+          0.24057355670264302,
+          0.0842876388071983,
+          0.050319987413933044,
+          0.022356161693003297,
+          0.01316782157984294,
+          0.0031529629659316416,
+          0.0015367075104978586,
+          0.0011334493226072898
          ]
         }
        ],
@@ -1103,10 +1081,23 @@
     "\n",
     "fig = go.Figure()\n",
     "\n",
-    "fig.add_trace(go.Scatter(x=[i for i in range(len(exp_var_cumsum))], y=exp_var_cumsum, name='Cumulative Explained Variance',\n",
-    "                         line=dict(color=palette[0], width=2)))\n",
-    "fig.add_trace(go.Bar(x=[i for i in range(len(exp_var_cumsum))], y=exp_var, name='Explained Variance', marker_color=palette[1],\n",
-    "                     width=0.5))\n",
+    "fig.add_trace(\n",
+    "    go.Scatter(\n",
+    "        x=list(range(len(exp_var_cumsum))),\n",
+    "        y=exp_var_cumsum,\n",
+    "        name='Cumulative Explained Variance',\n",
+    "        line=dict(color=palette[0], width=2),\n",
+    "    )\n",
+    ")\n",
+    "fig.add_trace(\n",
+    "    go.Bar(\n",
+    "        x=list(range(len(exp_var_cumsum))),\n",
+    "        y=exp_var,\n",
+    "        name='Explained Variance',\n",
+    "        marker_color=palette[1],\n",
+    "        width=0.7,\n",
+    "    )\n",
+    ")\n",
     "\n",
     "fig.update_layout(\n",
     "    xaxis=dict(title='Principal Components', titlefont_size=20, tickfont_size=16),\n",
@@ -1125,69 +1116,299 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 39,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def pca_transform(train, test, N):\n",
+    "    pca = PCA(n_components=N, random_state=CFG.SEED)\n",
+    "    X = pca.fit_transform(train.drop(\"Class\", axis=1))\n",
+    "    X = pd.DataFrame(X, columns=[f'PC{i}' for i in range(N)])\n",
+    "    y = train['Class']\n",
+    "    return pca.transform(test), X, y"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 44,
    "metadata": {},
    "outputs": [],
    "source": [
     "N = 3\n",
-    "pca = PCA(n_components=N, random_state=CFG.SEED)\n",
-    "X = pca.fit_transform(scaled_tr.drop(\"Class\", axis=1))\n",
-    "X = pd.DataFrame(X, columns=[f'PC{i}' for i in range(N)])\n",
-    "y = scaled_tr['Class']\n",
+    "config['n_components'] = N\n",
     "\n",
-    "test = pca.transform(scaled_tst)"
+    "X_test, X, y = pca_transform(scaled_tr, scaled_tst, N)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 21,
    "metadata": {},
    "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:55w3txgk) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "e65337aa3fbb415e8a9e1b8426abffd2",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='0.094 MB of 0.094 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, max…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>best_iteration</td><td>▃▅▄▂█▂▄▁</td></tr><tr><td>best_score</td><td>▁▇▇▄▄█▃█</td></tr><tr><td>epoch</td><td>▁▃▄▅▇▂▃▅▆▇▂▄▅▆▁▃▄▅▁▂▄▅▇█▂▃▅▆▂▃▅▆▇▂▄▅▆▂▃▅</td></tr><tr><td>validation_0-logloss</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>best_iteration</td><td>733</td></tr><tr><td>best_score</td><td>0.0409</td></tr><tr><td>epoch</td><td>628</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">XGBoost</strong> at: <a href='https://wandb.ai/g-broughton/S3E10/runs/55w3txgk' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/55w3txgk</a><br/>Synced 7 W&B file(s), 8 media file(s), 8 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20230318_223022-55w3txgk/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Successfully finished last run (ID:55w3txgk). Initializing new run:<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "87101e273bcc49d5b4e67844a933a60c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.016669582516669834, max=1.0…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>/home/broug/Desktop/S3E10/notebooks/wandb/run-20230318_224133-yppomagn</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/g-broughton/S3E10/runs/yppomagn' target=\"_blank\">XGBoost</a></strong> to <a href='https://wandb.ai/g-broughton/S3E10' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/g-broughton/S3E10' target=\"_blank\">https://wandb.ai/g-broughton/S3E10</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/g-broughton/S3E10/runs/yppomagn' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/yppomagn</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "[0]\tvalidation_0-logloss:0.65621\n",
-      "[100]\tvalidation_0-logloss:0.24852\n",
-      "[200]\tvalidation_0-logloss:0.24745\n",
-      "[281]\tvalidation_0-logloss:0.24747\n",
-      "[0]\tvalidation_0-logloss:0.65623\n",
-      "[100]\tvalidation_0-logloss:0.24717\n",
-      "[200]\tvalidation_0-logloss:0.24599\n",
-      "[300]\tvalidation_0-logloss:0.24596\n",
-      "[321]\tvalidation_0-logloss:0.24600\n",
-      "[0]\tvalidation_0-logloss:0.65617\n",
-      "[100]\tvalidation_0-logloss:0.24754\n",
-      "[200]\tvalidation_0-logloss:0.24642\n",
-      "[300]\tvalidation_0-logloss:0.24630\n",
-      "[333]\tvalidation_0-logloss:0.24633\n",
-      "[0]\tvalidation_0-logloss:0.65624\n",
-      "[100]\tvalidation_0-logloss:0.24674\n",
-      "[200]\tvalidation_0-logloss:0.24606\n",
-      "[225]\tvalidation_0-logloss:0.24604\n",
-      "[0]\tvalidation_0-logloss:0.65613\n",
-      "[100]\tvalidation_0-logloss:0.24965\n",
-      "[200]\tvalidation_0-logloss:0.24884\n",
-      "[294]\tvalidation_0-logloss:0.24881\n",
-      "[0]\tvalidation_0-logloss:0.65614\n",
-      "[100]\tvalidation_0-logloss:0.24731\n",
-      "[200]\tvalidation_0-logloss:0.24618\n",
-      "[271]\tvalidation_0-logloss:0.24618\n",
-      "[0]\tvalidation_0-logloss:0.65623\n",
-      "[100]\tvalidation_0-logloss:0.25011\n",
-      "[200]\tvalidation_0-logloss:0.24918\n",
-      "[251]\tvalidation_0-logloss:0.24923\n",
-      "[0]\tvalidation_0-logloss:0.65630\n",
-      "[100]\tvalidation_0-logloss:0.24689\n",
-      "[200]\tvalidation_0-logloss:0.24593\n",
-      "[300]\tvalidation_0-logloss:0.24587\n",
-      "[334]\tvalidation_0-logloss:0.24596\n",
-      "[0]\tvalidation_0-logloss:0.65626\n",
-      "[100]\tvalidation_0-logloss:0.24643\n",
-      "[200]\tvalidation_0-logloss:0.24538\n",
-      "[300]\tvalidation_0-logloss:0.24521\n",
-      "[400]\tvalidation_0-logloss:0.24520\n",
-      "[436]\tvalidation_0-logloss:0.24534\n"
+      "[0]\tvalidation_0-logloss:0.64366\n",
+      "[100]\tvalidation_0-logloss:0.04621\n",
+      "[200]\tvalidation_0-logloss:0.04008\n",
+      "[300]\tvalidation_0-logloss:0.03861\n",
+      "[400]\tvalidation_0-logloss:0.03781\n",
+      "[500]\tvalidation_0-logloss:0.03729\n",
+      "[600]\tvalidation_0-logloss:0.03690\n",
+      "[700]\tvalidation_0-logloss:0.03683\n",
+      "[800]\tvalidation_0-logloss:0.03670\n",
+      "[868]\tvalidation_0-logloss:0.03672\n",
+      "[0]\tvalidation_0-logloss:0.64369\n",
+      "[100]\tvalidation_0-logloss:0.04943\n",
+      "[200]\tvalidation_0-logloss:0.04405\n",
+      "[300]\tvalidation_0-logloss:0.04289\n",
+      "[400]\tvalidation_0-logloss:0.04201\n",
+      "[500]\tvalidation_0-logloss:0.04154\n",
+      "[600]\tvalidation_0-logloss:0.04116\n",
+      "[700]\tvalidation_0-logloss:0.04085\n",
+      "[800]\tvalidation_0-logloss:0.04070\n",
+      "[900]\tvalidation_0-logloss:0.04051\n",
+      "[933]\tvalidation_0-logloss:0.04051\n",
+      "[0]\tvalidation_0-logloss:0.64362\n",
+      "[100]\tvalidation_0-logloss:0.04864\n",
+      "[200]\tvalidation_0-logloss:0.04367\n",
+      "[300]\tvalidation_0-logloss:0.04260\n",
+      "[400]\tvalidation_0-logloss:0.04177\n",
+      "[500]\tvalidation_0-logloss:0.04137\n",
+      "[600]\tvalidation_0-logloss:0.04116\n",
+      "[700]\tvalidation_0-logloss:0.04083\n",
+      "[800]\tvalidation_0-logloss:0.04068\n",
+      "[885]\tvalidation_0-logloss:0.04066\n",
+      "[0]\tvalidation_0-logloss:0.64357\n",
+      "[100]\tvalidation_0-logloss:0.04731\n",
+      "[200]\tvalidation_0-logloss:0.04194\n",
+      "[300]\tvalidation_0-logloss:0.04066\n",
+      "[400]\tvalidation_0-logloss:0.04009\n",
+      "[500]\tvalidation_0-logloss:0.03941\n",
+      "[600]\tvalidation_0-logloss:0.03912\n",
+      "[700]\tvalidation_0-logloss:0.03882\n",
+      "[800]\tvalidation_0-logloss:0.03860\n",
+      "[825]\tvalidation_0-logloss:0.03864\n",
+      "[0]\tvalidation_0-logloss:0.64366\n",
+      "[100]\tvalidation_0-logloss:0.04691\n",
+      "[200]\tvalidation_0-logloss:0.04117\n",
+      "[300]\tvalidation_0-logloss:0.04010\n",
+      "[400]\tvalidation_0-logloss:0.03965\n",
+      "[500]\tvalidation_0-logloss:0.03923\n",
+      "[600]\tvalidation_0-logloss:0.03895\n",
+      "[700]\tvalidation_0-logloss:0.03875\n",
+      "[800]\tvalidation_0-logloss:0.03863\n",
+      "[900]\tvalidation_0-logloss:0.03852\n",
+      "[1000]\tvalidation_0-logloss:0.03841\n",
+      "[1042]\tvalidation_0-logloss:0.03850\n",
+      "[0]\tvalidation_0-logloss:0.64373\n",
+      "[100]\tvalidation_0-logloss:0.04986\n",
+      "[200]\tvalidation_0-logloss:0.04439\n",
+      "[300]\tvalidation_0-logloss:0.04290\n",
+      "[400]\tvalidation_0-logloss:0.04212\n",
+      "[500]\tvalidation_0-logloss:0.04176\n",
+      "[600]\tvalidation_0-logloss:0.04148\n",
+      "[700]\tvalidation_0-logloss:0.04111\n",
+      "[800]\tvalidation_0-logloss:0.04104\n",
+      "[802]\tvalidation_0-logloss:0.04104\n",
+      "[0]\tvalidation_0-logloss:0.64360\n",
+      "[100]\tvalidation_0-logloss:0.04737\n",
+      "[200]\tvalidation_0-logloss:0.04161\n",
+      "[300]\tvalidation_0-logloss:0.04012\n",
+      "[400]\tvalidation_0-logloss:0.03929\n",
+      "[500]\tvalidation_0-logloss:0.03905\n",
+      "[600]\tvalidation_0-logloss:0.03883\n",
+      "[700]\tvalidation_0-logloss:0.03860\n",
+      "[800]\tvalidation_0-logloss:0.03828\n",
+      "[900]\tvalidation_0-logloss:0.03817\n",
+      "[910]\tvalidation_0-logloss:0.03818\n",
+      "[0]\tvalidation_0-logloss:0.64365\n",
+      "[100]\tvalidation_0-logloss:0.04894\n",
+      "[200]\tvalidation_0-logloss:0.04357\n",
+      "[300]\tvalidation_0-logloss:0.04241\n",
+      "[400]\tvalidation_0-logloss:0.04175\n",
+      "[500]\tvalidation_0-logloss:0.04141\n",
+      "[600]\tvalidation_0-logloss:0.04109\n",
+      "[700]\tvalidation_0-logloss:0.04102\n",
+      "[782]\tvalidation_0-logloss:0.04096\n",
+      "[0]\tvalidation_0-logloss:0.64355\n",
+      "[100]\tvalidation_0-logloss:0.04801\n",
+      "[200]\tvalidation_0-logloss:0.04265\n",
+      "[300]\tvalidation_0-logloss:0.04137\n",
+      "[400]\tvalidation_0-logloss:0.04060\n",
+      "[500]\tvalidation_0-logloss:0.04012\n",
+      "[600]\tvalidation_0-logloss:0.03977\n",
+      "[700]\tvalidation_0-logloss:0.03947\n",
+      "[800]\tvalidation_0-logloss:0.03926\n",
+      "[900]\tvalidation_0-logloss:0.03901\n",
+      "[1000]\tvalidation_0-logloss:0.03889\n",
+      "[1043]\tvalidation_0-logloss:0.03890\n"
      ]
     }
    ],
@@ -1214,6 +1435,9 @@
     "            'eval_metric': 'logloss',\n",
     "            'random_state': CFG.SEED}\n",
     "\n",
+    "config.update({key:val for key, val in xgbr_params.items() if key not in ['random_state', 'eval_metric', 'verbosity', 'objective', 'n_jobs']})\n",
+    "wandb.init(project='S3E10', name='XGBoost', group='XGBoost', config=config)\n",
+    "\n",
     "for train_index, test_index in k_fold.split(X, y):\n",
     "    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n",
     "    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n",
@@ -1223,20 +1447,75 @@
     "    model.fit(X=X_train, y=y_train,\n",
     "          eval_set=[(X_valid, y_valid)],\n",
     "          early_stopping_rounds = CFG.XG_PATIENCE,\n",
-    "          verbose = 100\n",
+    "          verbose = 100, callbacks=[wandb.xgboost.WandbCallback(log_model=False)]\n",
     "         )\n",
     "    modelsXB.append(model)\n",
-    "    predsXB.append(model.predict_proba(test)[:, 1])"
+    "    predsXB.append(model.predict_proba(X_test)[:, 1])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "[array([0.7111551 , 0.16333364, 0.12551117], dtype=float32),\n",
+       " array([0.71454674, 0.16249926, 0.12295397], dtype=float32),\n",
+       " array([0.70543176, 0.17237453, 0.12219369], dtype=float32),\n",
+       " array([0.72080547, 0.16008782, 0.11910668], dtype=float32),\n",
+       " array([0.6976138 , 0.17023507, 0.13215113], dtype=float32),\n",
+       " array([0.718605  , 0.16489132, 0.11650369], dtype=float32),\n",
+       " array([0.71374947, 0.16561152, 0.12063902], dtype=float32),\n",
+       " array([0.7162871 , 0.1660631 , 0.11764979], dtype=float32),\n",
+       " array([0.69904864, 0.17194287, 0.12900849], dtype=float32)]"
+      ]
+     },
+     "execution_count": 24,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "[modelsXB[x].feature_importances_ for x in range(CFG.NFOLDS*CFG.REPEATS)]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "feature_importance =  [modelsXB[x].feature_importances_ for x in range(CFG.NFOLDS*CFG.REPEATS)]\n",
+    "feature_importance = np.average(feature_importance,axis=0)\n",
+    "data = [[label, value] for (label, value) in zip(X.columns, feature_importance)]\n",
+    "\n",
+    "table = wandb.Table(data=data, columns=['label', 'value'])\n",
+    "wandb.log({'XGBoost_Feature_Importance': wandb.plot.bar(table, 'label', 'value', title=\"Feature Importance\")})\n",
+    "# feature_df = pd.DataFrame(feature_importance, index=X.columns)\n",
+    "# feature_df\n",
+    "# wandb.Table\n",
+    "\n",
+    "# fig, ax = plt.subplots(figsize=(12, 4))\n",
+    "# sns.barplot(x=feature_df.values.squeeze(), y=feature_df.index,\n",
+    "#             color=palette[-3], linestyle=\"-\", width=0.5, errorbar='sd',\n",
+    "#             linewidth=0.5, edgecolor=\"black\", ax=ax)\n",
+    "# ax.set_title('Feature Importance', fontdict={'fontweight': 'bold'})\n",
+    "# ax.set(xlabel=None)\n",
+    "\n",
+    "# for s in ['right', 'top']:\n",
+    "#     ax.spines[s].set_visible(False)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 1200x400 with 1 Axes>"
       ]
@@ -1251,73 +1530,273 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 33,
    "metadata": {},
    "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:8ztskvnf) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">LightGBM</strong> at: <a href='https://wandb.ai/g-broughton/S3E10/runs/8ztskvnf' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/8ztskvnf</a><br/>Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20230318_230701-8ztskvnf/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Successfully finished last run (ID:8ztskvnf). Initializing new run:<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "274b9cf3a51347ee9891243745a4420c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.016669023666660603, max=1.0…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>/home/broug/Desktop/S3E10/notebooks/wandb/run-20230318_230741-l7bw1ih0</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/g-broughton/S3E10/runs/l7bw1ih0' target=\"_blank\">LightGBM</a></strong> to <a href='https://wandb.ai/g-broughton/S3E10' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/g-broughton/S3E10' target=\"_blank\">https://wandb.ai/g-broughton/S3E10</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/g-broughton/S3E10/runs/l7bw1ih0' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/l7bw1ih0</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "[150]\tvalid_0's binary_logloss: 0.26163\n",
-      "[300]\tvalid_0's binary_logloss: 0.253519\n",
-      "[450]\tvalid_0's binary_logloss: 0.251152\n",
-      "[600]\tvalid_0's binary_logloss: 0.250327\n",
-      "[750]\tvalid_0's binary_logloss: 0.249971\n",
-      "[900]\tvalid_0's binary_logloss: 0.249899\n",
-      "[150]\tvalid_0's binary_logloss: 0.260289\n",
-      "[300]\tvalid_0's binary_logloss: 0.252004\n",
-      "[450]\tvalid_0's binary_logloss: 0.249784\n",
-      "[600]\tvalid_0's binary_logloss: 0.248906\n",
-      "[750]\tvalid_0's binary_logloss: 0.248527\n",
-      "[900]\tvalid_0's binary_logloss: 0.248416\n",
-      "[1050]\tvalid_0's binary_logloss: 0.248357\n",
-      "[150]\tvalid_0's binary_logloss: 0.260121\n",
-      "[300]\tvalid_0's binary_logloss: 0.252118\n",
-      "[450]\tvalid_0's binary_logloss: 0.249996\n",
-      "[600]\tvalid_0's binary_logloss: 0.249259\n",
-      "[750]\tvalid_0's binary_logloss: 0.248911\n",
-      "[900]\tvalid_0's binary_logloss: 0.248789\n",
-      "[1050]\tvalid_0's binary_logloss: 0.248756\n",
-      "[150]\tvalid_0's binary_logloss: 0.259503\n",
-      "[300]\tvalid_0's binary_logloss: 0.251531\n",
-      "[450]\tvalid_0's binary_logloss: 0.249346\n",
-      "[600]\tvalid_0's binary_logloss: 0.248557\n",
-      "[750]\tvalid_0's binary_logloss: 0.248175\n",
-      "[900]\tvalid_0's binary_logloss: 0.248081\n",
-      "[150]\tvalid_0's binary_logloss: 0.261804\n",
-      "[300]\tvalid_0's binary_logloss: 0.253811\n",
-      "[450]\tvalid_0's binary_logloss: 0.251577\n",
-      "[600]\tvalid_0's binary_logloss: 0.250747\n",
-      "[750]\tvalid_0's binary_logloss: 0.250489\n",
-      "[900]\tvalid_0's binary_logloss: 0.250409\n",
-      "[150]\tvalid_0's binary_logloss: 0.26058\n",
-      "[300]\tvalid_0's binary_logloss: 0.252477\n",
-      "[450]\tvalid_0's binary_logloss: 0.250205\n",
-      "[600]\tvalid_0's binary_logloss: 0.249347\n",
-      "[750]\tvalid_0's binary_logloss: 0.24902\n",
-      "[900]\tvalid_0's binary_logloss: 0.248907\n",
-      "[1050]\tvalid_0's binary_logloss: 0.248894\n",
-      "[150]\tvalid_0's binary_logloss: 0.262181\n",
-      "[300]\tvalid_0's binary_logloss: 0.254486\n",
-      "[450]\tvalid_0's binary_logloss: 0.252566\n",
-      "[600]\tvalid_0's binary_logloss: 0.251837\n",
-      "[750]\tvalid_0's binary_logloss: 0.25169\n",
-      "[900]\tvalid_0's binary_logloss: 0.251644\n",
-      "[1050]\tvalid_0's binary_logloss: 0.251613\n",
-      "[1200]\tvalid_0's binary_logloss: 0.251585\n",
-      "[150]\tvalid_0's binary_logloss: 0.25972\n",
-      "[300]\tvalid_0's binary_logloss: 0.251726\n",
-      "[450]\tvalid_0's binary_logloss: 0.249519\n",
-      "[600]\tvalid_0's binary_logloss: 0.248792\n",
-      "[750]\tvalid_0's binary_logloss: 0.248621\n",
-      "[150]\tvalid_0's binary_logloss: 0.26038\n",
-      "[300]\tvalid_0's binary_logloss: 0.251888\n",
-      "[450]\tvalid_0's binary_logloss: 0.249347\n",
-      "[600]\tvalid_0's binary_logloss: 0.248257\n",
-      "[750]\tvalid_0's binary_logloss: 0.247782\n",
-      "[900]\tvalid_0's binary_logloss: 0.247613\n",
-      "[1050]\tvalid_0's binary_logloss: 0.247571\n",
-      "[1200]\tvalid_0's binary_logloss: 0.24755\n"
+      "[150]\tvalid_0's binary_logloss: 0.0953115\n",
+      "[300]\tvalid_0's binary_logloss: 0.0578285\n",
+      "[450]\tvalid_0's binary_logloss: 0.0465859\n",
+      "[600]\tvalid_0's binary_logloss: 0.0429607\n",
+      "[750]\tvalid_0's binary_logloss: 0.0417193\n",
+      "[900]\tvalid_0's binary_logloss: 0.0412125\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0408657\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0406281\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0404454\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0403004\n",
+      "[1650]\tvalid_0's binary_logloss: 0.040134\n",
+      "[1800]\tvalid_0's binary_logloss: 0.039977\n",
+      "[1950]\tvalid_0's binary_logloss: 0.0398348\n",
+      "[2100]\tvalid_0's binary_logloss: 0.0397093\n",
+      "[2250]\tvalid_0's binary_logloss: 0.0396199\n",
+      "[2400]\tvalid_0's binary_logloss: 0.0395487\n",
+      "[2550]\tvalid_0's binary_logloss: 0.0394833\n",
+      "[2700]\tvalid_0's binary_logloss: 0.0393988\n",
+      "[2850]\tvalid_0's binary_logloss: 0.0393578\n",
+      "[3000]\tvalid_0's binary_logloss: 0.0393198\n",
+      "[3150]\tvalid_0's binary_logloss: 0.0392504\n",
+      "[150]\tvalid_0's binary_logloss: 0.0974361\n",
+      "[300]\tvalid_0's binary_logloss: 0.0609198\n",
+      "[450]\tvalid_0's binary_logloss: 0.0504399\n",
+      "[600]\tvalid_0's binary_logloss: 0.0471976\n",
+      "[750]\tvalid_0's binary_logloss: 0.0461932\n",
+      "[900]\tvalid_0's binary_logloss: 0.0458815\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0457063\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0455999\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0455374\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0454223\n",
+      "[1650]\tvalid_0's binary_logloss: 0.045354\n",
+      "[1800]\tvalid_0's binary_logloss: 0.0452869\n",
+      "[150]\tvalid_0's binary_logloss: 0.0967318\n",
+      "[300]\tvalid_0's binary_logloss: 0.0602258\n",
+      "[450]\tvalid_0's binary_logloss: 0.0495236\n",
+      "[600]\tvalid_0's binary_logloss: 0.0464229\n",
+      "[750]\tvalid_0's binary_logloss: 0.0454533\n",
+      "[900]\tvalid_0's binary_logloss: 0.0451307\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0448799\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0447199\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0446035\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0445153\n",
+      "[1650]\tvalid_0's binary_logloss: 0.0444743\n",
+      "[1800]\tvalid_0's binary_logloss: 0.0444384\n",
+      "[150]\tvalid_0's binary_logloss: 0.0958859\n",
+      "[300]\tvalid_0's binary_logloss: 0.0590208\n",
+      "[450]\tvalid_0's binary_logloss: 0.048187\n",
+      "[600]\tvalid_0's binary_logloss: 0.0448998\n",
+      "[750]\tvalid_0's binary_logloss: 0.043834\n",
+      "[900]\tvalid_0's binary_logloss: 0.0435314\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0433134\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0431404\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0429727\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0428223\n",
+      "[1650]\tvalid_0's binary_logloss: 0.0426725\n",
+      "[1800]\tvalid_0's binary_logloss: 0.0425403\n",
+      "[1950]\tvalid_0's binary_logloss: 0.0424394\n",
+      "[2100]\tvalid_0's binary_logloss: 0.0423679\n",
+      "[2250]\tvalid_0's binary_logloss: 0.0423352\n",
+      "[2400]\tvalid_0's binary_logloss: 0.0423191\n",
+      "[150]\tvalid_0's binary_logloss: 0.0957902\n",
+      "[300]\tvalid_0's binary_logloss: 0.0586745\n",
+      "[450]\tvalid_0's binary_logloss: 0.0477712\n",
+      "[600]\tvalid_0's binary_logloss: 0.0443834\n",
+      "[750]\tvalid_0's binary_logloss: 0.0431842\n",
+      "[900]\tvalid_0's binary_logloss: 0.0427418\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0424984\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0423001\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0421263\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0420089\n",
+      "[1650]\tvalid_0's binary_logloss: 0.041933\n",
+      "[1800]\tvalid_0's binary_logloss: 0.0418636\n",
+      "[1950]\tvalid_0's binary_logloss: 0.0418177\n",
+      "[2100]\tvalid_0's binary_logloss: 0.0417807\n",
+      "[2250]\tvalid_0's binary_logloss: 0.0417507\n",
+      "[150]\tvalid_0's binary_logloss: 0.0976631\n",
+      "[300]\tvalid_0's binary_logloss: 0.0612745\n",
+      "[450]\tvalid_0's binary_logloss: 0.050758\n",
+      "[600]\tvalid_0's binary_logloss: 0.0475686\n",
+      "[750]\tvalid_0's binary_logloss: 0.0465338\n",
+      "[900]\tvalid_0's binary_logloss: 0.0460578\n",
+      "[1050]\tvalid_0's binary_logloss: 0.045788\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0456355\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0455341\n",
+      "[1500]\tvalid_0's binary_logloss: 0.045468\n",
+      "[150]\tvalid_0's binary_logloss: 0.0961729\n",
+      "[300]\tvalid_0's binary_logloss: 0.0592529\n",
+      "[450]\tvalid_0's binary_logloss: 0.0483499\n",
+      "[600]\tvalid_0's binary_logloss: 0.0448941\n",
+      "[750]\tvalid_0's binary_logloss: 0.0436287\n",
+      "[900]\tvalid_0's binary_logloss: 0.0430799\n",
+      "[1050]\tvalid_0's binary_logloss: 0.042739\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0425077\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0423356\n",
+      "[1500]\tvalid_0's binary_logloss: 0.042196\n",
+      "[1650]\tvalid_0's binary_logloss: 0.0420934\n",
+      "[1800]\tvalid_0's binary_logloss: 0.0420136\n",
+      "[1950]\tvalid_0's binary_logloss: 0.0419501\n",
+      "[2100]\tvalid_0's binary_logloss: 0.0419015\n",
+      "[150]\tvalid_0's binary_logloss: 0.0968553\n",
+      "[300]\tvalid_0's binary_logloss: 0.0603588\n",
+      "[450]\tvalid_0's binary_logloss: 0.049717\n",
+      "[600]\tvalid_0's binary_logloss: 0.0464687\n",
+      "[750]\tvalid_0's binary_logloss: 0.0454297\n",
+      "[900]\tvalid_0's binary_logloss: 0.0451313\n",
+      "[1050]\tvalid_0's binary_logloss: 0.04491\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0447537\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0446334\n",
+      "[1500]\tvalid_0's binary_logloss: 0.0445572\n",
+      "[1650]\tvalid_0's binary_logloss: 0.0445016\n",
+      "[1800]\tvalid_0's binary_logloss: 0.044468\n",
+      "[150]\tvalid_0's binary_logloss: 0.0965871\n",
+      "[300]\tvalid_0's binary_logloss: 0.0597409\n",
+      "[450]\tvalid_0's binary_logloss: 0.048881\n",
+      "[600]\tvalid_0's binary_logloss: 0.0453394\n",
+      "[750]\tvalid_0's binary_logloss: 0.0440698\n",
+      "[900]\tvalid_0's binary_logloss: 0.0435557\n",
+      "[1050]\tvalid_0's binary_logloss: 0.0432693\n",
+      "[1200]\tvalid_0's binary_logloss: 0.0430864\n",
+      "[1350]\tvalid_0's binary_logloss: 0.0430167\n",
+      "[1500]\tvalid_0's binary_logloss: 0.042946\n",
+      "[1650]\tvalid_0's binary_logloss: 0.0428961\n",
+      "[1800]\tvalid_0's binary_logloss: 0.042851\n",
+      "[1950]\tvalid_0's binary_logloss: 0.0428034\n",
+      "[2100]\tvalid_0's binary_logloss: 0.0427793\n"
      ]
     }
    ],
@@ -1330,40 +1809,58 @@
     "            'max_depth': 5,\n",
     "            'learning_rate': 0.00693702575527996,\n",
     "            'subsample': 0.20851841295589477,\n",
-    "            'colsample_bytree': 0.5784778854092203,\n",
+    "            'colsample_bytree': 0.5784778854092203, \n",
     "            'reg_alpha': 0.2622912287429849,\n",
     "            'reg_lambda': 2.8702494234117617e-08,\n",
     "            'objective': 'binary',\n",
     "            'metric': 'logloss',\n",
     "            'boosting_type': 'gbdt',\n",
-    "           \n",
     "            'random_state': CFG.SEED\n",
     "        }\n",
+    "config = {} | {\n",
+    "    key: value for key, value in lgbr_params.items() if key not in ['']\n",
+    "}\n",
+    "wandb.init(project='S3E10', name='LightGBM', group='LightGBM', config=config, reinit=True)\n",
     "\n",
     "for train_index, test_index in k_fold.split(X, y):\n",
     "    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n",
     "    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n",
-    "    \n",
+    "\n",
     "    model = lgbm.LGBMClassifier(**lgbr_params)\n",
-    "    \n",
+    "\n",
     "    model.fit(X=X_train, y=y_train,\n",
     "          eval_set=[(X_valid, y_valid)],\n",
     "          eval_metric = 'logloss',\n",
     "          early_stopping_rounds = CFG.XG_PATIENCE,\n",
-    "          verbose = 150\n",
+    "          verbose = 150,\n",
+    "          callbacks=[wandb_callback()]\n",
     "         )\n",
     "    modelsLB.append(model)\n",
-    "    predsLB.append(model.predict_proba(test)[:, 1])"
+    "    predsLB.append(model.predict_proba(X_test)[:, 1])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 34,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "feature_importance =  [modelsLB[x].feature_importances_ for x in range(CFG.NFOLDS*CFG.REPEATS)]\n",
+    "feature_importance = np.average(feature_importance,axis=0)\n",
+    "data = [[label, value] for (label, value) in zip(X.columns, feature_importance)]\n",
+    "\n",
+    "table = wandb.Table(data=data, columns=['label', 'value'])\n",
+    "wandb.log({'LGBM_Feature_Importance': wandb.plot.bar(table, 'label', 'value', title=\"Feature Importance\")})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 1200x400 with 1 Axes>"
       ]
@@ -1378,39 +1875,144 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 45,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:4uz18tlz) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "713e2349fcb54025bae66486058eaefc",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='0.103 MB of 0.103 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, max…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">RandomForest</strong> at: <a href='https://wandb.ai/g-broughton/S3E10/runs/4uz18tlz' target=\"_blank\">https://wandb.ai/g-broughton/S3E10/runs/4uz18tlz</a><br/>Synced 7 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>./wandb/run-20230318_232307-4uz18tlz/logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Successfully finished last run (ID:4uz18tlz). Initializing new run:<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "ace599a941cd4f8e899131d20aeb04d8",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.016669370099983403, max=1.0…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
-    "predsRF = []\\n\",\n",
-    "\\n\",\n",
-    "params = {\\n\",\n",
-    "        'criterion': 'log_loss',\\n\",\n",
-    "        'n_jobs': -1,\\n\",\n",
-    "        'random_state': CFG.SEED,\\n\",\n",
-    "        'verbose': False\\n\",\n",
-    "    }\\n\",\n",
-    "\\n\",\n",
-    "for train_index, test_index in k_fold.split(X, y):\\n\",\n",
-    "    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\\n\",\n",
-    "    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\\n\",\n",
-    "    \\n\",\n",
-    "    model = RandomForestClassifier(**params)\\n\",\n",
-    "    model.fit(X=X_train, y=y_train)\\n\",\n",
-    "    yprobas = model.predict_proba(X_valid)\\n\",\n",
-    "    ypred = model.predict(X_valid)\\n\",\n",
-    "    score = log_loss(y_valid, ypred)\\n\",\n",
-    "    print(f'Score: {score}')\\n\",\n",
-    "    \\n\",\n",
-    "    modelsRF.append(model)\\n\",\n",
-    "    predsRF.append(model.predict_proba(test)[:, 1])\\n\",\n",
-    "#     wandb.sklearn.plot_classifier(model, \\n\",\n",
-    "#                               X_train, X_valid, \\n\",\n",
-    "#                               y_train, y_valid,\\n\",\n",
-    "#                               ypred, yprobas,\\n\",\n",
-    "#                               [0, 1],\\n\",\n",
-    "#                               is_binary=True, \\n\",\n",
-    "#                               model_name='RandomForest')\\n\","
+    "modelsRF = []\n",
+    "predsRF = []\n",
+    "\n",
+    "params = {\n",
+    "        'criterion': 'log_loss',\n",
+    "        'n_jobs': -1,\n",
+    "        'random_state': CFG.SEED,\n",
+    "        'verbose': False,\n",
+    "        'n_estimators': 100,\n",
+    "        'max_depth': None,\n",
+    "        'min_samples_split': 2,\n",
+    "        'min_samples_leaf': 1,\n",
+    "        'min_weight_fraction_leaf': 0.0,\n",
+    "        'max_features': 'sqrt',\n",
+    "        'max_leaf_nodes': None,\n",
+    "        'min_impurity_decrease': 0.0,\n",
+    "        'bootstrap': True,\n",
+    "        'max_samples': None\n",
+    "    }\n",
+    "\n",
+    "config = {} | {\n",
+    "    key:value for key, value in params.items() if key not in ['criterion', 'n_jobs', 'random_state', 'verbose', 'bootstrap']\n",
+    "}\n",
+    "wandb.init(project='S3E10', name='RandomForest', group='RandomForest', config=config, reinit=True)\n",
+    "\n",
+    "for train_index, test_index in k_fold.split(X, y):\n",
+    "    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n",
+    "    y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n",
+    "    \n",
+    "    model = RandomForestClassifier(**params)\n",
+    "    model.fit(X=X_train, y=y_train)\n",
+    "    yprobas = model.predict_proba(X_valid)\n",
+    "    ypred = model.predict(X_valid)\n",
+    "    score = log_loss(y_valid, ypred)\n",
+    "    print(f'Score: {score}')\n",
+    "    \n",
+    "    modelsRF.append(model)\n",
+    "    predsRF.append(model.predict_proba(X_test)[:, 1])\n",
+    "    wandb.sklearn.plot_classifier(model, \n",
+    "                               X_train, X_valid, \n",
+    "                               y_train, y_valid,\n",
+    "                               ypred, yprobas,\n",
+    "                               [0, 1],\n",
+    "                               is_binary=True, \n",
+    "                               model_name='RandomForest')"
    ]
   },
   {
diff --git a/notebooks/wandb/latest-run b/notebooks/wandb/latest-run
index d86c610..c0c34f4 120000
--- a/notebooks/wandb/latest-run
+++ b/notebooks/wandb/latest-run
@@ -1 +1 @@
-run-20230315_101528-tdnu1cub
\ No newline at end of file
+run-20230318_235359-ohyaaksl
\ No newline at end of file
